# consumption_analysis.py
import pandas as pd  # Data manipulation library
import matplotlib.pyplot as plt  # Plotting library
import matplotlib.dates as mdates  # Date formatting for plots
from matplotlib import rcParams  # Global plot style settings

# Global style settings
rcParams['font.family'] = 'Arial'  # Set font to Arial for all plots
plt.style.use('ggplot')  # Use ggplot style for plots

# ======================
# Data Loading & Preprocessing
# ======================
def load_forecast_data():
    """Load forecast data
    - Input: 2025_forecast.csv (generated by consumption.py)
    - Output: DataFrame with time features added
    """
    df = pd.read_csv('2025_forecast.csv')  # Read forecast data file
    df['ds'] = pd.to_datetime(df['ds'])  # Convert 'ds' column to datetime
    
    # 添加时间特征 (Add time-based features)
    df['hour'] = df['ds'].dt.hour  # Extract hour (0-23)
    df['day_of_week'] = df['ds'].dt.day_name()  # Day name (e.g., Monday)
    df['month'] = df['ds'].dt.month_name()  # Month name (e.g., January)
    df['date'] = df['ds'].dt.date  # Date without time
    
    return df

# ======================
# Visualization Functions
# ======================
def plot_daily_variation(df):
    """Plot hourly consumption pattern
    - Input: DataFrame with 'hour' and 'yhat' columns
    - Output: daily_variation_2025.png
    """
    # Aggregate by hour
    daily = df.groupby('hour')['yhat'].mean()  # Calculate mean consumption per hour
    
    plt.figure(figsize=(12, 6))  # Set figure size
    daily.plot(kind='line', 
              marker='o', 
              color='#1f77b4',  # Line color (blue)
              linewidth=2,
              markersize=8)
    
    # Labels and formatting
    plt.title("2025 Daily Electricity Consumption Pattern", pad=20)
    plt.xlabel("Hour of Day", labelpad=15)  # X-axis label
    plt.ylabel("Average Consumption (kWh)", labelpad=15)  # Y-axis label
    plt.xticks(range(0, 24))  # Set hourly ticks
    plt.grid(True, alpha=0.3)  # Show grid
    plt.tight_layout()  # Adjust layout
    plt.savefig('daily_variation_2025.png', dpi=300, bbox_inches='tight')  # Save plot
    plt.close()  # Close figure

def plot_weekly_variation(df):
    """Plot weekly consumption pattern
    - Input: DataFrame with 'day_of_week' and 'yhat' columns
    - Output: weekly_variation_2025.png
    """
    # Aggregate by weekday
    weekday_order = ['Monday', 'Tuesday', 'Wednesday', 
                    'Thursday', 'Friday', 'Saturday', 'Sunday']
    weekly = df.groupby('day_of_week')['yhat'].mean().reindex(weekday_order)  # Reorder days
    
    plt.figure(figsize=(12, 6))
    weekly.plot(kind='line',
               marker='s',  # Square markers
               color='#2ca02c',  # Green color
               linewidth=2,
               markersize=8)
    
    plt.title("2025 Weekly Electricity Consumption Pattern", pad=20)
    plt.xlabel("Day of Week", labelpad=15)
    plt.ylabel("Average Consumption (kWh)", labelpad=15)
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('weekly_variation_2025.png', dpi=300, bbox_inches='tight')
    plt.close()

def plot_monthly_variation(df):
    """Plot monthly consumption trend
    - Input: DataFrame with 'ds' (datetime) and 'yhat' columns
    - Output: monthly_trend_2025.png
    """
    # Resample by month
    monthly = df.resample('ME', on='ds')['yhat'].mean()  # monthly average
    
    plt.figure(figsize=(12, 6))
    monthly.plot(kind='line',
                marker='D',  # Diamond markers
                color='#d62728',  # Red color
                linewidth=2,
                markersize=8)
    
    plt.title("2025 Monthly Electricity Consumption Trend", pad=20)
    plt.xlabel("Month", labelpad=15)
    plt.ylabel("Average Consumption (kWh)", labelpad=15)
    
    # Date formatting
    ax = plt.gca()  # Get current axis
    ax.xaxis.set_major_locator(mdates.MonthLocator())  # Set monthly ticks
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))  # Format as short month name
    
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('monthly_trend_2025.png', dpi=300, bbox_inches='tight')
    plt.close()

# ======================
# Main Program
# ======================
if __name__ == "__main__":
    # Load data
    forecast_df = load_forecast_data()  # Call data loader
    
    # Generate plots
    plot_daily_variation(forecast_df)  # Hourly pattern
    plot_weekly_variation(forecast_df)  # Weekly pattern
    plot_monthly_variation(forecast_df)  # Monthly trend
    
    print("Analysis complete! Generate file:")
    print("- daily_variation_2025.png")
    print("- weekly_variation_2025.png")
    print("- monthly_trend_2025.png")